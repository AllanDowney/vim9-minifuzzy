*minifuzzy.txt*     Simple Vim9 fuzzy finder wrapper  Last change: 2024 Jul 03

                       _       _  __                     ~
             _ __ ___ (_)_ __ (_)/ _|_   _ _________   _ ~
            | '_ ` _ \| | '_ \| | |_| | | |_  /_  / | | |~
            | | | | | | | | | | |  _| |_| |/ / / /| |_| |~
            |_| |_| |_|_|_| |_|_|_|  \__,_/___/___|\__, |~
                                                   |___/ ~

                  Simple Vim9 fuzzy finder wrapper
          Designed to be minimal, powerful, and extensible

====================================================================
CONTENTS                                           *MinifuzzyContents*

    1. Intro ................ |Minifuzzy|
    2. Usage ................ |MinifuzzyUsage|
        2.1. Quickstart ..... |MinifuzzyQuickstart|
        2.2. Mappings ....... |MinifuzzyMappings|
        2.3. Commands ....... |MinifuzzyCommands|
        2.4. Variables ...... |MinifuzzyVariables|
    3. Custom Prompts ....... |MinifuzzyCustom|
    4. About ................ |MinifuzzyAbout|

====================================================================
1. Intro                                                   *Minifuzzy*

minifuzzy.vim is a simple wrapper for Vim's fuzzy finder written in
Vim9 script that supports custom hooks for writing your own fuzzy
finding mechanism.

====================================================================
2. Usage                                              *MinifuzzyUsage*

--------------------------------------------------------------------
2.1. Quickstart                                  *MinifuzzyQuickstart*

To begin using minifuzzy.vim, press <Leader>ff to fuzzy find in the
current working directory |pwd|. minifuzzy.vim will open a popup window
for fuzzy finding. Press <Esc> to close this window.

Begin typing to narrow the selection down to what you want. Your
current selection will be highlighted. Pressing <CR> will select
the currently highlighted file and open it.

Pressing <C-U> will clear the search query but not close the window.

To select the next or previous best options, use <C-N> or <C-P>.
Arrow keys also work.

Dependent on `fd`.

--------------------------------------------------------------------
2.2. Mappings                                      *MinifuzzyMappings*

The following mappings can be used to initiate a fuzzy find:

    <Leader>ff ............. Files in current working directory
    <Leader>fb ............. Buffers
    <Leader>fm ............. Most recently used files
    <Leader>fl ............. Lines in the current buffer
    <Leader>fg ............. Files in current Git repository

While the minifuzzy.vim window is open:

    <CR> ............. Select the currently highlighted selection
    <C-X> ............ Same as above but opens in a split
    <C-V> ............ Same as above but opens in a vertical split
    <C-T> ............ Same as above but opens in a tabpage
    <C-U> ............ Clear the search query
    <Esc> ............ Close the minifuzzy.vim window
    <C-P> or <Up> .... Put the cursor over the previous option
    <C-N> or <Down> .. Put the cursor over the next option

If in command mode and either <C-Tab> or <C-P> is pressed, a fuzzy
finder prompt will be created to complete (and replace) the current
typed token.

    :col<C-Tab>

This will create a fuzzy finder prompt with the values that would
be expected when trying to autocomplete: `colder` and `colorscheme`.
Upon selecting a command with <CR> ( for example: `colorscheme` ),
the new command line will look like this:

    :colorscheme|

The bar indicates where the cursor will be placed.

--------------------------------------------------------------------
2.3. Commands                                      *MinifuzzyCommands*

|:FzyFind| [{directory}]
    Fuzzy find through files using the Unix `fd` command in the
    provided directory or in the current working directory if
    excluded. Use 'wildignore'.
    {directory} can have the following values:
        ''      The current directory (Default and can be omitted)
                Mapped to: <leader>ff
        '1'     The directory one level above the current file
        '2'     The directory two levels up to the current file

    You can customize. Default: >

        nnoremap <Leader>ff <Plug>FzyFind
        nnoremap <Leader>f1 <Cmd>FzyFind<Space>1<CR>
        nnoremap <Leader>f2 <Cmd>FzyFind<Space>2<CR>
<
|:FzyBuffers|
    Fuzzy find through buffers currently listed. Excludes the
    current buffer from the list. If there is only one buffer, this
    does nothing.
    Mapped to: <leader>fb

|:FzyMRU|
    Fuzzy find through the most recently used files. Uses
    |v:oldfiles| as values, ignoring some directories such as
    vim helpfiles.
    Mapped to: <leader>fm

|:FzyLines|
    Fuzzy find through the lines in the current buffer. Jump to the
    line number of the current selection.
    Mapped to: <leader>fl

|:FzyGitFiles|
    Fuzzy find through files in a Git repository. Effectively calls
    git ls-files and fills the window with the result.
    Mapped to: <leader>fg

--------------------------------------------------------------------
2.4. Variables                                    *MinifuzzyVariables*

                                        *g:minifuzzy_MRU_limit*
|g:minifuzzy_MRU_limit|     number    (default 10)
    The most recently used files numbers for |:FzyMRU|.
>
        vim9script
        g:minifuzzy_MRU_limit = 50
<

                                        *g:minifuzzy_all_mapps*
|g:minifuzzy_all_mapps|     boolean   (default on)
    Allow disabling all the default bindings. So user can set up his
    own.
>
        vim9script
        g:minifuzzy_all_mapps = 0
        # custom key mapping
        nnoremap <leader>ff <Plug>(FzyFind)
        nnoremap <leader>fb <Plug>(FzyBuffers)
        nnoremap <leader>fm <Plug>(FzyMRU)
        nnoremap <leader>fl <Plug>(FzyLines)
        nnoremap <leader>fg <Plug>(FzyGitFiles)
        nnoremap <leader>fc <Plug>(FzyCommand)
<
                                *g:minifuzzy_popup_maxheight*
|g:minifuzzy_popup_maxheight|   number    (default 20)
    Set the maximum height of the pop-up if there are too many lists.
    The result plus 1.
>
        vim9script
        g:minifuzzy_popup_maxheight = 30
        # then popup_height is 31

        g:minifuzzy_popup_maxheight = 29
        # then popup_height is 30
<
                                *g:minifuzzy_popup_borderhighlight*
|g:minifuzzy_popup_borderhighlight|      list<string>
                                         (default empty)
    List of highlight group names to use for the border.
    See also  |popup_create-arguments|.

                                *g:minifuzzy_select_highlight*
|g:minifuzzy_select_highlight|        string  (default 'Search')
    The highlight groupname used for line text prop.
    See also |highlight-groups|.

                                *g:minifuzzy_find_hidden*
|g:minifuzzy_find_hidden|           boolean  (default false)
    Include hidden directories and files in the search results

                                *g:minifuzzy_find_level*
|g:minifuzzy_find_level|           string  (default '-d4')
    Limit the directory traversal to a given depth.
    By default, there is limit 4 on the search depth.
>
    vim9script
    g:minifuzzy_find_level = '-d2'
<
    Or no limit
>
    vim9script
    g:minifuzzy_find_level = ''
<
                                *g:minifuzzy_find_exclude*
|g:minifuzzy_find_exclude|           list<string>  (default empty)
    Exclude files/directories that match the given glob pattern.
    The default '.git' is always excluded.
>
    vim9script
    g:minifuzzy_find_exclude = ['.cache', '.npm']
<

====================================================================
3. Custom Prompts                                    *MinifuzzyCustom*

minifuzzy.vim is a general-purpose wrapper for Vim's builtin fuzzy
finding capabilities and is meant to be extended easily.

Fuzzy finding is initiated with a call to |InitFuzzyFind()| which
has the following signature in |Vim9| script:
>
    def InitFuzzyFind(values: list<string>, options: dict<any>)
<
Where {values} are the possible values to search against and {options}
can contain the following keys:
>
    format_cb:          func(string): string
    exec_cb:            func(string): string
    ctrl_x_cb:          func(string): string
    ctrl_v_cb:          func(string): string
    ctrl_t_cb:          func(string): string
    cancel_cb:          func
    title:              string
    filetype:           string
    results_to_display: number
<
The |format_cb| gets called on each value in {values} and displays the
return value in the miniterm.vim window.

NOTE: The search query will be matched against format_cb(value),
not value. By default, format_cb(value) == value.

|exec_cb| gets called when <CR> is pressed, with the currently
selected value passed as the only argument. Two additional execution
callbacks |ctrl_x_cb| |ctrl_v_cb| and |ctrl_t_cb| can be called when
<C-X> <C-V> or <C-T> are pressed, respectively.

Additionally, if needed, |cancel_cb| will be called after <Esc> is
pressed and the window is closed.

{title} will be used as the title for the popup window. If {filetype}
is provided and not an empty string, the 'filetype' will be applied
to the popup window, to allow syntax highlighting and such.

|results_to_display| denotes how many lines in the popup window are
dedicated to showing results before scrolling is required.
See also |g:minifuzzy_popup_maxheight|.

Example:                                     *MinifuzzyCustomExamples*
>
    com! MyCustomFuzzy call minifuzzy#InitFuzzyFind(['a', 'b'], {
        \ 'exec_cb': {s -> execute('edit ' . s)} })
<
This command will call `:edit` on the selected value from ['a', 'b'].
>
    let bufnrs = getbufinfo()->map('string(v:val.bufnr)')
    com! FuzBufs call minifuzzy#InitFuzzyFind(bufnrs, {
        \ 'format_cb': {s -> bufname(s)},
        \ 'exec_cb': {bn -> execute('echo ' . bn)} })
<
This command collects all buffer numbers and creates a minifuzzy.vim
window that matches against the buffers' names. When <CR> is
pressed, the buffer name that was selected will have its buffer
number passed to `:echo`.

Here is an example using |vim9|.
>
    com! FuzzyColors {
        minifuzzy#InitFuzzyFind(getcompletion('', 'color'), {
            exec_cb: (cs) => execute($'colorscheme {cs}')
        })
    }
<
This command uses the |getcompletion| function to get a list of the
colorschemes available. When <CR> is pressed, the selected
colorscheme is passed as the argument to the `:colorscheme` command.

====================================================================
4. About                                              *MinifuzzyAbout*

Christopher Pane, a.k.a. hahdookin, is the author of this plugin. He
can be reached at:

    * Email ............. ChrisPaneCS@gmail.com
    * Website ........... https://chrispane.dev
    * Blog .............. https://chrispane.dev/blog

If you have any issues, feel free to reach out.

--------------------------------------------------------------------
 vim:tw=68:ts=8:ft=help:noet:nospell
